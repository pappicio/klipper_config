########################################################################################################
### menu main ###
[menu __main]
type: list
name: Menu'

### menu tune ###
[menu __main __tune]
type: list
enable: {printer.idle_timeout.state == "Printing"}
name: Regolare

[menu __main __tune __speed]
type: input
name: Velocita': {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.speed_factor}
input_min: 0.01
input_max: 5
input_step: 0.01
realtime: True
gcode:
    M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type: input
name: Flusso: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type: input
name: Z Offset:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1


### menu octoprint ###
[menu __main __octoprint]
type: list
name: Fluidd

[menu __main __octoprint __pause]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Stoppa Stampa
gcode:
    PAUSE
    {action_respond_info('action:pause')}

[menu __main __octoprint __resume]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Riprendi Stampa
gcode:
    RESUME
    {action_respond_info('action:resume')}

[menu __main __octoprint __abort]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Cancella Stampa
gcode:
    CANCEL_PRINT
    {action_respond_info('action:cancel')}

### menu virtual sdcard ###
[menu __main __sdcard]
type: vsdlist
enable: {('virtual_sdcard' in printer)}
name: SD Card

[menu __main __sdcard __start]
type: command
enable: {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path}
name: Inizia Stampa da SD
gcode: M24

[menu __main __sdcard __resume]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "paused"}
name: Riprendi Stampa da SD
gcode:
    {% if "pause_resume" in printer %}
        RESUME
    {% else %}
        M24
    {% endif %}

[menu __main __sdcard __pause]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "printing"}
name: Stoppa Stampa da SD
gcode:
    {% if "pause_resume" in printer %}
        PAUSE
    {% else %}
        M25
    {% endif %}

[menu __main __sdcard __cancel]
type: command
enable: {('virtual_sdcard' in printer) and (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Cancella Stampa da SD
gcode:
    {% if 'pause_resume' in printer %}
        CANCEL_PRINT
    {% else %}
        M25
        M27
        M26 S0
        TURN_OFF_HEATERS
        {% if printer.toolhead.position.z <= printer.toolhead.axis_maximum.z - 5 %}
            G91
            G0 Z5 F1000
            G90
        {% endif %}
    {% endif %}

### menu control ###
[menu __main __control]
type: list
name: Controlli

[menu __main __control __home]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home
gcode: G28

[menu __main __control __homez]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home Z
gcode: G28 Z

[menu __main __control __homexy]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home X/Y
gcode: G28 X Y

[menu __main __control __disable]
type: command
name: Sblocca Steppers
gcode:
    M84
    M18

[menu __main __control __fanonoff]
type: input
enable: {'fan' in printer}
name: Ventola: {'ON ' if menu.input else 'OFF'}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
    M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type: input
enable: {'fan' in printer}
name: Velocita': {'%3d' % (menu.input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M106 S{'%d' % (menu.input*255)}

###########################################################################################################################
[menu __main __control __caselightonoff]
type: list
enable: true 
name: Luci 
  
[menu __main __control __caselightonoff __red]
type: input
enable: true
name: Rosso: {'%3d' % (menu.input*100)}%
input: {printer["gcode_macro global"].r}
input_min: 0
input_max: 1
input_step: 0.01
gcode: 
    SET_GCODE_VARIABLE MACRO=global VARIABLE=r VALUE={menu.input}    ###{printer.heater_bed.target}
    SET_LED LED=neopixel RED={menu.input} GREEN={printer["gcode_macro global"].g} BLUE={printer["gcode_macro global"].b} 
    SAVE_VARIABLE VARIABLE=r VALUE={menu.input}

[menu __main __control __caselightonoff __green]
type: input
enable: true
name: Verde: {'%3d' % (menu.input*100)}%
input: {printer["gcode_macro global"].g}
input_min: 0
input_max: 1
input_step: 0.01
gcode: 
    SET_GCODE_VARIABLE MACRO=global VARIABLE=g VALUE={menu.input}    ###{printer.heater_bed.target}
    SET_LED LED=neopixel RED={printer["gcode_macro global"].r} GREEN={menu.input} BLUE={printer["gcode_macro global"].b} 
    SAVE_VARIABLE VARIABLE=g VALUE={menu.input}

[menu __main __control __caselightonoff __blue]
type: input
enable: true
name: Blu: {'%3d' % (menu.input*100)}%
input: {printer["gcode_macro global"].b}
input_min: 0
input_max: 1
input_step: 0.01
gcode: 
    SET_GCODE_VARIABLE MACRO=global VARIABLE=b VALUE={menu.input}    
    SET_LED LED=neopixel RED={printer["gcode_macro global"].r} GREEN={printer["gcode_macro global"].g}  BLUE={menu.input}
    SAVE_VARIABLE VARIABLE=b VALUE={menu.input}

[menu __main __control __caselightonoff __white]
type: input
enable: true
name: Bianco: {'%3d' % (menu.input*100)}%
input: {printer["gcode_macro global"].w}
input_min: 0
input_max: 1
input_step: 0.01
gcode: 
    SET_GCODE_VARIABLE MACRO=global VARIABLE=w VALUE={menu.input}    
    SET_LED LED=neopixel RED={menu.input} GREEN={menu.input}  BLUE={menu.input}
    SAVE_VARIABLE VARIABLE=w VALUE={menu.input}


###########################################################################################################################
### menu move 10mm ###
[menu __main __control __move_10mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi 10mm

[menu __main __control __move_10mm __axis_x]
type: input
name: Muovi X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type: input
name: Muovi Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi Estrusore:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu move 1mm ###
[menu __main __control __move_1mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi 1mm

[menu __main __control __move_1mm __axis_x]
type: input
name: Muovi X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type: input
name: Muovi Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi Estrusore:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu move 0.1mm ###
[menu __main __control __move_01mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi 0.1mm

[menu __main __control __move_01mm __axis_x]
type: input
name: Muovi X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type: input
name: Muovi Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi Estrusore:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu temperature ###
[menu __main __temp]
type: list
name: Temperatura

[menu __main __temp __hotend0_target]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main __temp __hotend1_target]
type: input
enable: {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name: {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input: {printer.extruder1.target}
input_min: 0
input_max: {printer.configfile.config.extruder1.max_temp}
input_step: 1
gcode: M104 T1 S{'%.0f' % menu.input}

[menu __main __temp __hotbed_target]
type: input
enable: {'heater_bed' in printer}
name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode: M140 S{'%.0f' % menu.input}

[menu __main __temp __preheat_pla]
type: list
name: Preriscalda PLA

[menu __main __temp __preheat_pla __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preriscalda tutto
gcode:
    M140 S60
    M104 S195

[menu __main __temp __preheat_pla __hotend]
type: command
enable: {'extruder' in printer}
name: Preriscalda hotend
gcode: M104 S195

[menu __main __temp __preheat_pla __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preriscalda bed
gcode: M140 S60

[menu __main __temp __preheat_abs]
type: list
name: Preriscalda PETG

[menu __main __temp __preheat_abs __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preriscalda tutto
gcode:
    M140 S70
    M104 S230

[menu __main __temp __preheat_abs __hotend]
type: command
enable: {'extruder' in printer}
name: Preriscalda hotend
gcode: M104 S230

[menu __main __temp __preheat_abs __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preriscalda bed
gcode: M140 S70

###############################################
[menu __main __temp __preheat_abs1]
type: list
name: Preriscalda TPU

[menu __main __temp __preheat_abs1 __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preriscalda tutto
gcode:
    M140 S75
    M104 S230

[menu __main __temp __preheat_abs1 __hotend]
type: command
enable: {'extruder' in printer}
name: Preriscalda hotend
gcode: M104 S230

[menu __main __temp __preheat_abs1 __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preriscalda bed
gcode: M140 S75

[menu __main __temp __preheat_abs2]
type: list
name: Preriscalda ABS

[menu __main __temp __preheat_abs2 __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preriscalda tutto
gcode:
    M140 S95
    M104 S250

[menu __main __temp __preheat_abs2 __hotend]
type: command
enable: {'extruder' in printer}
name: Preriscalda hotend
gcode: M104 S250

[menu __main __temp __preheat_abs2 __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preriscalda bed
gcode: M140 S95

###############################################

[menu __main __temp __cooldown]
type: list
name: Raffredda

[menu __main __temp __cooldown __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Raffredda tutto
gcode:
    M104 S0
    M140 S0

[menu __main __temp __cooldown __hotend]
type: command
enable: {'extruder' in printer}
name: Raffredda hotend
gcode: M104 S0

[menu __main __temp __cooldown __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Raffredda bed
gcode: M140 S0

### menu filament ###

[menu __main __filament]
type: list
name: Cambio Filamento

[menu __main __filament __hotend0_target]
type: input
enable: {'extruder' in printer}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type: command
name: Carica veloce
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E50 F960
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type: command
name: Carica lento
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E50 F240
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type: command
name: Scarica Veloce
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E-50 F960
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type: command
name: Scarica lento
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E-50 F240
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadsx]
type: command
name: Ferma Filamento
gcode:
    G1 E0 F240

[menu __main __filament __feed]
type: input
name: Alimenta: {'%.1f' % menu.input}
input: 5
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E{'%.1f' % menu.input} F60
    RESTORE_GCODE_STATE NAME=__filament__load

### menu setup ###
[menu __main __setup]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Setup

[menu __main __setup __save_config]
type: command
name: Salva config
gcode: SAVE_CONFIG

[menu __main __setup __restart]
type: list
name: Riavvia Stampante

[menu __main __setup __restart __host_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Riavvia host
gcode: RESTART

[menu __main __setup __restart __firmware_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Riavvia Firmware
gcode: FIRMWARE_RESTART

[menu __main __setup __tuning]
type: list
name: Calibra PID

[menu __main __setup __tuning __hotend_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name: Calibra PID Hotend
gcode: PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name: Calibra PID bed
gcode: PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type: list
name: Calibrazioni

[menu __main __setup __calib __delta_calib_auto]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: cal. Delta auto
gcode:
    G28
    DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: cal. Delta man

[menu __main __setup __calib __bedprobe]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Probe Bed
gcode: PROBE

[menu __main __setup __calib __delta_calib_man __start]
type: command
name: Avvia probing
gcode:
    G28
    DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type: input
name: Muovi Z: {'%03.2f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_step: 1
realtime: True
gcode:
    {%- if menu.event == 'change' -%}
        G1 Z{'%.2f' % menu.input}
    {%- elif menu.event == 'long_click' -%}
        G1 Z{'%.2f' % menu.input}
        SAVE_GCODE_STATE NAME=__move__axis
        G91
        G1 Z2
        G1 Z-2
        RESTORE_GCODE_STATE NAME=__move__axis
    {%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type: input
name: Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input: 6
input_min: 0
input_max: 11
input_step: 1
gcode:
    {%- if menu.event == 'long_click' -%}
        TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
    {%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type: command
name: Accetta
gcode: ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type: command
name: Annulla
gcode: ABORT

[menu __main __setup __dump]
type: command
name: Parametri di Dump
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s"
                               % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

########################################################################################################
########################################################################################################
#######################################################################

### menu cambiofilament ###

###[menu __main __cambiofilament]
###type: list
###name: Cambio Filamento

#########################
######submenus###########

[menu __main __filament __test1]
type:command
name: Pausa x Cambio Filamento
gcode:
    M600

[menu __main __filament __test2]
type:command
name: Carica Filamento
gcode:
    LOAD_FILAMENT

[menu __main __filament __test3]
type:command
name: Spurga Filamento
gcode:
    PURGE

[menu __main __filament __test4]
type:command
name: Riprendi Stampa
gcode:
    RESUME

########################################################################################################

########################################################################################################

