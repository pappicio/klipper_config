[server]
host: 0.0.0.0
port: 7125

[file_manager]
enable_object_processing: True

[data_store]
temperature_store_size: 600
gcode_store_size: 1000




[authorization]
force_logins: false
cors_domains:
  *.local
  *.lan
  *://app.fluidd.xyz
  *:7136  #<--Allow PrettyGCode (port 7136) on all domains

trusted_clients:
  10.0.0.0/8
  127.0.0.0/8
  169.254.0.0/16
  172.16.0.0/12
  192.168.0.0/16
  FE80::/10
  ::1/128
  192.168.1.0/24

# enables partial support of Octoprint API
[octoprint_compat]

# enables moonraker to track and store print history.
[history]

# this enables moonraker's update manager
[update_manager]
enable_auto_refresh: false



[update_manager timelapse]
type: git_repo
primary_branch: main
path: ~/moonraker-timelapse
origin: https://github.com/mainsail-crew/moonraker-timelapse.git
managed_services: klipper moonraker

[power spegni_stampante]
type: klipper_device
object_name: gcode_macro spegnistampante
locked_while_printing: true

[power Spegnimento_brutale]
type: tasmota
address: 192.168.1.127 #50
locked_while_printing: true


[power gestisci_LED]
type: klipper_device
object_name: gcode_macro set_neopixel
###initial_state: on

[timelapse]
enabled: True
mode:layermacro
autorender: False
output_path: ~/timelapse/
gcode_verbose: False
parkhead: False
fw_retract: True
#parkpos: back_left
#park_custom_pos_x: 0.0
#park_custom_pos_y: 0.0
#park_custom_pos_dz: 0.0
#park_travel_speed: 100
#park_retract_speed: 15
#park_extrude_speed: 15
#park_retract_distance: 1.0
#park_extrude_distance: 1.0
#hyperlapse_cycle: 30
#constant_rate_factor: 23
#output_framerate: 30
#pixelformat: yuv420p
#time_format_code: %Y%m%d_%H%M
#extraoutputparams: 
#variable_fps: False
#targetlength: 10
#variable_fps_min: 5
#variable_fps_max: 60
#flip_x: False
#flip_y: False
#duplicatelastframe: 0
#previewimage: True
#saveframes: False
#wget_skip_cert_check: False


[update_manager mainsail]
type: web
channel: stable
repo: mainsail-crew/mainsail
path: ~/mainsail

[update_manager crowsnest]
type: git_repo
path: ~/crowsnest
origin: https://github.com/mainsail-crew/crowsnest.git
install_script: tools/install.sh

[update_manager KlipperScreen]
type: git_repo
path: /home/pi/KlipperScreen
origin: https://github.com/jordanruthe/KlipperScreen.git
env: /home/pi/.KlipperScreen-env/bin/python
requirements: scripts/KlipperScreen-requirements.txt
install_script: scripts/KlipperScreen-install.sh

[update_manager kiauh]
type: git_repo
###primary_branch: main
path: ~/kiauh
origin: https://github.com/th33xitus/kiauh.git
###install_script: kiauh.sh
managed_services: klipper moonraker
 

[mqtt]
address:192.168.1.191
port:1883
username:io
password:io

###password_file:
mqtt_protocol: v3.1.1
enable_moonraker_api: True
###instance_name:
status_objects:
default_qos: 0
###api_qos:

# Example configuration for ing with Tasmota firmware over mqtt
[power luci_sulle_scale]
type: mqtt
command_topic: cmnd/lightonsteps/POWER
# Tasmota uses "on" and "off" as the payload, so our template simply renders
# the command
command_payload:
  {command}
# There is no need to set the retain flag for Tasmota devices.  Moonraker
# will use the query topic to initialize the device.  Tasmota will publish
# all changes in state to the state topic.
retain_command_state: False
# To query a tasmota device we send the command topic without a payload.
# Optionally we could send a "?" as the payload.
query_topic: cmnd/tasmota_switch/POWER
# query_payload: ?
state_topic: stat/lightonsteps/POWER
# The response is either "ON" or "OFF".  Moonraker will handle converting to
# lower case.
state_response_template:
  {payload}
# Tasmota updates the state topic when the device state changes, so it is not
# not necessary to query after a command
query_after_command: False


[update_manager fluidd]
type: web
channel: stable
repo: fluidd-core/fluidd
path: ~/fluidd
